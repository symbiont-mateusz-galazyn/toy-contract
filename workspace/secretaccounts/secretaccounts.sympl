schema Transfer:
    id : Identifier
    timestamp : Timestamp
    # no source means that coin was mined
    source : Optional[KeyAlias]
    destination : KeyAlias
    amount : int

schema SwapInit:
    id : Identifier
    timestamp : Timestamp
    initialTransfer : Transfer

#
# Clientside
#

@clientside
def get_all_transfers() -> List[Transfer]:
    return _get_all_transfers()

@clientside
def get_balance() -> int:
    return _get_balance()

@clientside
def mine_coin(amount : int = 1) -> None:
    check_positive(amount, 'Cannot mine coin')
    with PostTxArgs(cvm.new_channel('COI'), _get_all_channels()):
        _mine_coin(amount)

@clientside
def send(recipient : KeyAlias, amount : int) -> None:
    check_if_can_transfer(recipient, amount)
    with PostTxArgs(cvm.new_channel('COI'), _get_all_channels()):
        _send(recipient, amount)

@clientside
def swap(recipient : KeyAlias, amount : int) -> None:
    check_if_can_transfer(recipient, amount)

    ch = cvm.new_channel('COI')
    with PostTxArgs(ch):
        # this should be done on the receiving end, so tx.key_alias would be the other party in the transaction
        register_swap_handler()

    with PostTxArgs(ch, _get_all_channels()):
        _swap(recipient, amount)

@clientside
def handler_swap(swap : SwapInit) -> None:
    swap_source = swap.initialTransfer.source
    swap_dest = swap.initialTransfer.destination
    swap_amount = swap.initialTransfer.amount
    if isinstance(swap_source, None):
        cvm.error("Invalid key alias")
    else:
        with PostTxArgs(cvm.new_channel('COI')):
            # we cannot check if the other KA has enough funds, so we just initialize a transfer
            # that's theoretically exploitable through some race condition
            _raw_send(swap_dest, swap_source, swap_amount)

#
# Helper
#

@helper
def _get_all_transfers() -> List[Transfer]:
    return [row.value for row in cvm.storage.query(TransferStatic).execute()]

@helper
def _get_all_channels() -> List[ChannelName]:
    channels : List[ChannelName] = [row.channel_name for row in cvm.storage.query(TransferStatic).execute()]
    return std.set(channels, str) + [PUBLIC]

@helper
def _get_balance() -> int:
    transfers = _get_all_transfers()
    incoming : List[int] = [tx.amount for tx in transfers if str(tx.destination) == str(cvm.tx.key_alias)]
    outgoing : List[int] = [tx.amount for tx in transfers if str(tx.source) == str(cvm.tx.key_alias)]
    return sum(incoming) - sum(outgoing)

@helper
def check_positive(v : int, msg: str) -> None:
    if v <= 0:
        cvm.error(f'{msg} Passed non-positive value: {v}')

@helper
def check_if_can_transfer(recipient : KeyAlias, amount : int) -> None:
    check_positive(amount, 'Cannot send coin to {recipient}')
    current_balance = _get_balance()
    if current_balance < amount:
        cvm.error(f'Not enough coins on source account {cvm.tx.key_alias}. Balance: {current_balance}')

@executable
def _raw_send(sender : Optional[KeyAlias], recipient : KeyAlias, amount : int) -> Transfer:
    cvm.send_key(cvm.tx.write_channel, recipient)
    if isinstance(sender, None):
        pass
    else:
        cvm.send_key(cvm.tx.write_channel, sender)
    id = cvm.generate_id('TSF')
    transfer = Transfer(
        id = id, 
        source = sender,
        destination = recipient, 
        amount = amount,
        timestamp = cvm.tx.timestamp)
    cvm.storage.put(id, transfer)
    return transfer

#
# Executable
#

@executable
def _mine_coin(amount : int = 1) -> Transfer:
    check_positive(amount, 'Cannot mine coin')
    return _raw_send(None, cvm.tx.key_alias, amount)

@executable
def _send(recipient : KeyAlias, amount : int) -> Transfer:
    check_if_can_transfer(recipient, amount)
    return _raw_send(cvm.tx.key_alias, recipient, amount)

@executable
def register_swap_handler() -> None:
    cvm.register_handler(handler_swap_ref, std.singleton(cvm.tx.key_alias))

@executable
def _swap(recipient : KeyAlias, amount : int) -> None:
    transfer = _send(recipient, amount)

    # notify other party about swap
    swap = SwapInit(
        id = cvm.generate_id('SWP'),
        timestamp = cvm.tx.timestamp,
        initialTransfer = transfer)
    cvm.emit(swap)

# vi:syntax=python
