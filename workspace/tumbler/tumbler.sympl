schema Transfer:
    id : Identifier
    # no source means that coin was mined
    source : Optional[KeyAlias]
    destination : KeyAlias
    amount : int

#
# Clientside
#

@clientside
def get_all_transfers() -> List[Transfer]:
    return _get_all_transfers()

@clientside
def get_balance() -> int:
    return _get_balance()

@clientside
def mine_coin(amount : int = 1) -> None:
    check_positive(amount, 'Cannot mine coin')
    with PostTxArgs(cvm.new_channel('COI'), _get_all_channels()):
        _mine_coin(amount)

@clientside
def send(amount : int, recipient : KeyAlias) -> None:
    check_if_can_transfer(amount, recipient)
    with PostTxArgs(cvm.new_channel('COI'), _get_all_channels()):
        _send(amount, recipient)

#
# Helper
#

@helper
def _get_all_transfers() -> List[Transfer]:
    return [row.value for row in cvm.storage.query(TransferStatic).execute()]

@helper
def _get_all_channels() -> List[ChannelName]:
    channels : List[ChannelName] = [row.channel_name for row in cvm.storage.query(TransferStatic).execute()]
    return std.set(channels, str) + [PUBLIC]

@helper
def _get_balance() -> int:
    transfers = _get_all_transfers()
    incoming : List[int] = [tx.amount for tx in transfers if str(tx.destination) == str(cvm.tx.key_alias)]
    outgoing : List[int] = [tx.amount for tx in transfers if str(tx.source) == str(cvm.tx.key_alias)]
    return sum(incoming) - sum(outgoing)

@helper
def check_positive(v : int, msg: str) -> None:
    if v <= 0:
        cvm.error(f'{msg} Passed non-positive value: {v}')

@helper
def check_if_can_transfer(amount : int, recipient : KeyAlias) -> None:
    check_positive(amount, 'Cannot send coin to {recipient}')
    current_balance = _get_balance()
    if current_balance < amount:
        cvm.error(f'Not enough coins on source account {cvm.tx.key_alias}. Balance: {current_balance}')

#
# Executable
#

@executable
def _mine_coin(amount : int = 1) -> None:
    check_positive(amount, 'Cannot mine coin')
    id = cvm.generate_id('TSF')
    transfer = Transfer(
        id = id, 
        source = None, 
        destination = cvm.tx.key_alias, 
        amount = amount)
    cvm.storage.put(id, transfer)

@executable
def _send(amount : int, recipient : KeyAlias) -> None:
    check_if_can_transfer(amount, recipient)
    cvm.send_key(cvm.tx.write_channel, recipient)
    id = cvm.generate_id('TSF')
    transfer = Transfer(
        id = id, 
        source = cvm.tx.key_alias,
        destination = recipient, 
        amount = amount)
    cvm.storage.put(id, transfer)

# vi:syntax=python
